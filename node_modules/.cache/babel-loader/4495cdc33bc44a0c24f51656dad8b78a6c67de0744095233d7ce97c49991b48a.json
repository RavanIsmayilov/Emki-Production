{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Color as RcColor } from '@rc-component/color-picker';\nimport { AggregationColor } from './color';\nexport const generateColor = color => {\n  if (color instanceof AggregationColor) {\n    return color;\n  }\n  return new AggregationColor(color);\n};\nexport const getRoundNumber = value => Math.round(Number(value || 0));\nexport const getColorAlpha = color => getRoundNumber(color.toHsb().a * 100);\n/** Return the color whose `alpha` is 1 */\nexport const genAlphaColor = (color, alpha) => {\n  const hsba = color.toHsb();\n  hsba.a = alpha || 1;\n  return generateColor(hsba);\n};\n/**\n * Get percent position color. e.g. [10%-#fff, 20%-#000], 15% => #888\n */\nexport const getGradientPercentColor = (colors, percent) => {\n  const filledColors = [{\n    percent: 0,\n    color: colors[0].color\n  }].concat(_toConsumableArray(colors), [{\n    percent: 100,\n    color: colors[colors.length - 1].color\n  }]);\n  for (let i = 0; i < filledColors.length - 1; i += 1) {\n    const startPtg = filledColors[i].percent;\n    const endPtg = filledColors[i + 1].percent;\n    const startColor = filledColors[i].color;\n    const endColor = filledColors[i + 1].color;\n    if (startPtg <= percent && percent <= endPtg) {\n      const dist = endPtg - startPtg;\n      if (dist === 0) {\n        return startColor;\n      }\n      const ratio = (percent - startPtg) / dist * 100;\n      const startRcColor = new RcColor(startColor);\n      const endRcColor = new RcColor(endColor);\n      return startRcColor.mix(endRcColor, ratio).toRgbString();\n    }\n  }\n  // This will never reach\n  /* istanbul ignore next */\n  return '';\n};","map":{"version":3,"names":["_toConsumableArray","Color","RcColor","AggregationColor","generateColor","color","getRoundNumber","value","Math","round","Number","getColorAlpha","toHsb","a","genAlphaColor","alpha","hsba","getGradientPercentColor","colors","percent","filledColors","concat","length","i","startPtg","endPtg","startColor","endColor","dist","ratio","startRcColor","endRcColor","mix","toRgbString"],"sources":["C:/Users/User/OneDrive/Desktop/EMKI/emki/node_modules/antd/es/color-picker/util.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Color as RcColor } from '@rc-component/color-picker';\nimport { AggregationColor } from './color';\nexport const generateColor = color => {\n  if (color instanceof AggregationColor) {\n    return color;\n  }\n  return new AggregationColor(color);\n};\nexport const getRoundNumber = value => Math.round(Number(value || 0));\nexport const getColorAlpha = color => getRoundNumber(color.toHsb().a * 100);\n/** Return the color whose `alpha` is 1 */\nexport const genAlphaColor = (color, alpha) => {\n  const hsba = color.toHsb();\n  hsba.a = alpha || 1;\n  return generateColor(hsba);\n};\n/**\n * Get percent position color. e.g. [10%-#fff, 20%-#000], 15% => #888\n */\nexport const getGradientPercentColor = (colors, percent) => {\n  const filledColors = [{\n    percent: 0,\n    color: colors[0].color\n  }].concat(_toConsumableArray(colors), [{\n    percent: 100,\n    color: colors[colors.length - 1].color\n  }]);\n  for (let i = 0; i < filledColors.length - 1; i += 1) {\n    const startPtg = filledColors[i].percent;\n    const endPtg = filledColors[i + 1].percent;\n    const startColor = filledColors[i].color;\n    const endColor = filledColors[i + 1].color;\n    if (startPtg <= percent && percent <= endPtg) {\n      const dist = endPtg - startPtg;\n      if (dist === 0) {\n        return startColor;\n      }\n      const ratio = (percent - startPtg) / dist * 100;\n      const startRcColor = new RcColor(startColor);\n      const endRcColor = new RcColor(endColor);\n      return startRcColor.mix(endRcColor, ratio).toRgbString();\n    }\n  }\n  // This will never reach\n  /* istanbul ignore next */\n  return '';\n};"],"mappings":"AAAA,OAAOA,kBAAkB,MAAM,8CAA8C;AAC7E,SAASC,KAAK,IAAIC,OAAO,QAAQ,4BAA4B;AAC7D,SAASC,gBAAgB,QAAQ,SAAS;AAC1C,OAAO,MAAMC,aAAa,GAAGC,KAAK,IAAI;EACpC,IAAIA,KAAK,YAAYF,gBAAgB,EAAE;IACrC,OAAOE,KAAK;EACd;EACA,OAAO,IAAIF,gBAAgB,CAACE,KAAK,CAAC;AACpC,CAAC;AACD,OAAO,MAAMC,cAAc,GAAGC,KAAK,IAAIC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACH,KAAK,IAAI,CAAC,CAAC,CAAC;AACrE,OAAO,MAAMI,aAAa,GAAGN,KAAK,IAAIC,cAAc,CAACD,KAAK,CAACO,KAAK,CAAC,CAAC,CAACC,CAAC,GAAG,GAAG,CAAC;AAC3E;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACT,KAAK,EAAEU,KAAK,KAAK;EAC7C,MAAMC,IAAI,GAAGX,KAAK,CAACO,KAAK,CAAC,CAAC;EAC1BI,IAAI,CAACH,CAAC,GAAGE,KAAK,IAAI,CAAC;EACnB,OAAOX,aAAa,CAACY,IAAI,CAAC;AAC5B,CAAC;AACD;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAGA,CAACC,MAAM,EAAEC,OAAO,KAAK;EAC1D,MAAMC,YAAY,GAAG,CAAC;IACpBD,OAAO,EAAE,CAAC;IACVd,KAAK,EAAEa,MAAM,CAAC,CAAC,CAAC,CAACb;EACnB,CAAC,CAAC,CAACgB,MAAM,CAACrB,kBAAkB,CAACkB,MAAM,CAAC,EAAE,CAAC;IACrCC,OAAO,EAAE,GAAG;IACZd,KAAK,EAAEa,MAAM,CAACA,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC,CAACjB;EACnC,CAAC,CAAC,CAAC;EACH,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,YAAY,CAACE,MAAM,GAAG,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAE;IACnD,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,CAAC,CAAC,CAACJ,OAAO;IACxC,MAAMM,MAAM,GAAGL,YAAY,CAACG,CAAC,GAAG,CAAC,CAAC,CAACJ,OAAO;IAC1C,MAAMO,UAAU,GAAGN,YAAY,CAACG,CAAC,CAAC,CAAClB,KAAK;IACxC,MAAMsB,QAAQ,GAAGP,YAAY,CAACG,CAAC,GAAG,CAAC,CAAC,CAAClB,KAAK;IAC1C,IAAImB,QAAQ,IAAIL,OAAO,IAAIA,OAAO,IAAIM,MAAM,EAAE;MAC5C,MAAMG,IAAI,GAAGH,MAAM,GAAGD,QAAQ;MAC9B,IAAII,IAAI,KAAK,CAAC,EAAE;QACd,OAAOF,UAAU;MACnB;MACA,MAAMG,KAAK,GAAG,CAACV,OAAO,GAAGK,QAAQ,IAAII,IAAI,GAAG,GAAG;MAC/C,MAAME,YAAY,GAAG,IAAI5B,OAAO,CAACwB,UAAU,CAAC;MAC5C,MAAMK,UAAU,GAAG,IAAI7B,OAAO,CAACyB,QAAQ,CAAC;MACxC,OAAOG,YAAY,CAACE,GAAG,CAACD,UAAU,EAAEF,KAAK,CAAC,CAACI,WAAW,CAAC,CAAC;IAC1D;EACF;EACA;EACA;EACA,OAAO,EAAE;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}